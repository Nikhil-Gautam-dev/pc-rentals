---
import BaseLayout from "../layouts/BaseLayout.astro";
import Alert from "../components/Alert.astro";
---

<BaseLayout pageTitle="Admin Page">
  <div class="loading-overlay">
    <div class="spinner"></div>
    <p>Please wait...</p>
  </div>

  <div class="admin-page" id="admin-page">
    <form id="admin-form" action="" , method="post">
      <input type="password" name="passkey" placeholder="Password" required />
      <button type="submit">admin</button>
    </form>
  </div>
  <div class="admin-dashboard" id="admin-dashboard">
    <!-- User Section -->
    <section class="admin-section admin-user-section">
      <h2>Users</h2>
      <div class="admin-table-wrapper">
        <table class="admin-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>PC Rented</th>
              <th>Currently Rented</th>
              <th>Total Lifetime Payment</th>
              <th>Pending Payment</th>
            </tr>
          </thead>
          <tbody id="admin-user-table-body"></tbody>
        </table>
      </div>
    </section>

    <!-- PC Section -->
    <section class="admin-section admin-pc-section">
      <h2>PCs</h2>
      <div class="admin-table-wrapper">
        <table class="admin-table">
          <thead>
            <tr>
              <th>Image</th>
              <th>Name</th>
              <th>Specs</th>
              <th>Rent per day</th>
              <th>Rent per hour</th>
              <th>Lifetime Earnings</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="admin-pc-table-body">
            <!-- Example row -->
            <tr class="admin-pc-row">
              <td>
                <img
                  src="/pcs/12.jpg"
                  alt="ASUS ROG Strix G13CHR 2024"
                  width="50"
                />
              </td>
              <td contenteditable="true">ASUS ROG Strix G13CHR 2024</td>
              <td contenteditable="true">
                <ul>
                  <li>Intel®️ Core™️ i7-14700F 14th Gen</li>
                  <li>Gaming Desktop</li>
                  <li>16GB RAM</li>
                  <li>1TB SSD</li>
                  <li>8GB NVIDIA GeForce RTX 4060</li>
                  <li>Windows 11</li>
                </ul>
              </td>
              <td contenteditable="true">Jane Smith</td>
              <td contenteditable="true">John Doe</td>
              <td contenteditable="true">5</td>
              <td>$2000</td>
              <td>
                <button class="admin-edit-btn">Save</button>
                <button class="admin-delete-btn">Delete</button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </section>

    <!-- Add New PC Section -->
    <section class="admin-section admin-add-pc-section">
      <h2>Add New PC</h2>
      <form
        id="admin-add-pc-form"
        action=""
        method="post"
        enctype="multipart/form-data"
      >
        <input type="text" name="name" placeholder="PC Name" required />
        <textarea name="specs" placeholder="Specs (comma-separated)" required
        ></textarea>
        <textarea name="desc" placeholder="Descrciption" required></textarea>
        <input
          type="number"
          name="rentPerDay"
          placeholder="rent per day"
          min="1"
          required
        />
        <input
          type="number"
          name="rentPerHour"
          placeholder="rent per hour"
          min="1"
          required
        />

        <input type="file" name="pcImg" placeholder="upload img" required />
        <button type="submit" id="add-pc-btn">Add PC</button>
      </form>
    </section>
  </div>

  <Alert id="admin-alert" />
</BaseLayout>

<style is:global>
  .admin-page {
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    gap: 20px;
    padding: 40px 20px;
    position: relative;
  }

  .admin-page h1 {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .admin-page p {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
  }

  #admin-form,
  #admin-add-pc-form {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    width: 100%;
    max-width: 500px;
  }

  .admin-page input,
  .admin-page textarea,
  .admin-dashboard input,
  .admin-dashboard textarea {
    padding: 1rem;
    border: 1px solid #2a2241;
    border-radius: 8px;
    background-color: #161026;
    color: #bdbdbd;
    width: 100%;
    max-width: 20rem;
  }

  .admin-page button,
  .admin-dashboard button {
    /* margin-top: 1rem; */
    margin: 1rem;
    /* width: 100%; */
    max-width: 20rem;
    box-shadow: none;
  }

  #admin-dashboard {
    display: none;
    flex-direction: column;
    gap: 2rem;
    padding: 2rem 1rem;
    width: 100%;
  }

  .admin-section {
    border: 1px solid #2a2241;
    border-radius: 8px;
    padding: 2rem;
    background-color: #161026;
    width: 100%;
    overflow: hidden;
  }

  .admin-section h2 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }

  .admin-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1rem;
  }

  .admin-table th,
  .admin-table td {
    border: 1px solid #2a2241;
    padding: 10px;
    text-align: left;
  }

  .admin-table th {
    background-color: #2a2241;
    color: #bdbdbd;
  }

  .admin-table td img {
    border-radius: 4px;
    display: block;
    max-width: 100%;
    height: auto;
  }

  .admin-user-row,
  .admin-pc-row {
    transition: background-color 0.2s;
  }

  .admin-user-row:nth-child(even),
  .admin-pc-row:nth-child(even) {
    background-color: #1a1630;
  }

  .admin-user-row:hover,
  .admin-pc-row:hover {
    background-color: #2a2241;
  }

  .admin-table-wrapper {
    overflow-x: auto;
    width: 100%;
  }

  .admin-edit-btn,
  .admin-delete-btn {
    margin: 0.25rem;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    width: auto;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .admin-edit-btn {
    background-color: #4caf50;
    color: white;
  }

  .admin-delete-btn {
    background-color: #f44336;
    color: white;
  }

  .admin-add-pc-section form {
    max-width: 600px;
    margin: 0 auto;
    width: 100%;
  }

  .admin-table li {
    list-style: none;
  }

  .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.9);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 10;
    border-radius: 12px;
    opacity: 1;
    transition:
      opacity 0.3s ease,
      visibility 0.3s ease;
  }

  .loading-overlay.hidden {
    opacity: 0;
    visibility: hidden;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(44, 44, 84, 0.2);
    border-radius: 50%;
    border-top-color: #2c2c54;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @media (max-width: 992px) {
    .admin-table ul {
      padding-left: 1rem;
    }

    .admin-table li {
      margin-bottom: 0.25rem;
    }
  }

  @media (max-width: 768px) {
    #admin-dashboard {
      padding: 3rem 0.5rem;
    }

    .admin-section {
      padding: 0.75rem;
    }

    .admin-table {
      font-size: 0.9rem;
    }

    .admin-table th,
    .admin-table td {
      padding: 0.5rem;
    }

    .admin-edit-btn,
    .admin-delete-btn {
      padding: 0.4rem 0.6rem;
      font-size: 0.85rem;
      display: block;
      width: unset;
      margin: 0.25rem 0;
    }

    .admin-table ul {
      padding-left: 1rem;
      margin: 0;
    }

    .admin-table li {
      margin-bottom: 0.2rem;
      font-size: 0.85rem;
    }
  }

  @media (max-width: 576px) {
    .admin-table {
      display: block;
      overflow-x: auto;
    }

    .admin-table th,
    .admin-table td {
      min-width: 120px;
      white-space: normal;
      word-break: break-word;
    }

    .admin-table td:nth-child(3) {
      /* Specs column */
      min-width: 180px;
    }

    .admin-table td:nth-child(7) {
      /* Actions column */
      min-width: 100px;
    }
  }
</style>

<script>
  import axios from "axios";
  import {
    clearAllCookies,
    getCookie,
    setCookie,
  } from "../utils/cookiesHandler";
  import { addUserRow, addPcRows } from "../utils/dynamicHtml";
  import { setupAlertClose, showAlert } from "../utils/alertHandler";
  import { API_URL } from "../utils/apiHandler";

  setupAlertClose("admin-alert");

  const adminLogin = async (passkey: string, form: HTMLFormElement) => {
    try {
      const res = await axios.post(API_URL + "/user/passkey", {
        superKey: passkey,
      });
      if (res.status == 200) {
        clearAllCookies();
        setCookie("adminToken", res.data.token, {
          expires: new Date(Date.now() + res.data.expires),
        });
        setCookie("userId", res.data.user._id, {
          expires: new Date(Date.now() + res.data.expires),
        });
      }
      return true;
    } catch (error) {
      return null;
    }
  };

  const addNewPC = async (formData: FormData, newPCForm: HTMLFormElement) => {
    try {
      const res = await axios.post(API_URL + "/pc", formData, {
        headers: {
          Authorization: `Bearer ${getCookie("accessToken")}`,
        },
      });

      if (res.status === 201) {
        newPCForm.reset();
        await getAndPopulatePCs();
      }
      return true;
    } catch (error) {
      console.error("Error adding new PC:", error);
      return null;
    }
  };

  const getAndPopulateUsers = async () => {
    try {
      const res = await axios.get(API_URL + "/user/getAll", {
        headers: {
          Authorization: `Bearer ${getCookie("adminToken")}`,
        },
      });
      const users = res.data.data;
      addUserRow(users, "admin-user-table-body");
    } catch (error) {
      window.location.href = "/";
      console.error("Error fetching users:", error);
    }
  };

  const getAndPopulatePCs = async () => {
    try {
      const res = await axios.get(API_URL + "/pc", {
        headers: {
          Authorization: `Bearer ${getCookie("adminToken")}`,
        },
      });
      const pcs = res.data.data;
      addPcRows(pcs, (id) => {
        deletePC(id);
      });
    } catch (error) {
      window.location.href = "/";
      console.error("Error fetching PCs:", error);
    }
  };

  const deletePC = async (id: string) => {
    showAlert("Deleting PC, please wait...", "info", "admin-alert");
    try {
      const res = await axios.delete(API_URL + `/pc?id=${id}`, {
        headers: {
          Authorization: `Bearer ${getCookie("adminToken")}`,
        },
      });

      if (res.status == 200) {
        showAlert("PC deleted successfully", "success", "admin-alert");
        await getAndPopulatePCs();
      }
    } catch (error) {
      window.location.href = "/";
      console.error("Error fetching PCs:", error);
    }
  };

  document.addEventListener("DOMContentLoaded", async () => {
    const form = document.getElementById(
      "admin-form"
    ) as HTMLFormElement | null;
    const dashboard = document.getElementById(
      "admin-dashboard"
    ) as HTMLDivElement | null;
    const adminPage = document.getElementById(
      "admin-page"
    ) as HTMLDivElement | null;

    const newPCForm = document.getElementById(
      "admin-add-pc-form"
    ) as HTMLFormElement | null;

    const newPCBtn = document.getElementById("add-pc-btn") as HTMLButtonElement;

    const loadingOverlays = document.querySelector(
      ".loading-overlay"
    ) as HTMLElement;

    newPCForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      newPCBtn.disabled = true;
      showAlert("Adding new PC please wait...", "info", "admin-alert");
      const formData = new FormData(newPCForm);

      const newPC = await addNewPC(formData, newPCForm);

      if (!newPC) {
        showAlert(
          "Failed to add new PC. Please try again.",
          "error",
          "admin-alert"
        );
      } else {
        showAlert("New PC added successfuly", "success", "admin-alert");
      }

      newPCBtn.disabled = false;
    });

    form.addEventListener("submit", async (e) => {
      showAlert("verifying your passkey");
      loadingOverlays.style.display = "flex";
      e.preventDefault();

      const formData = new FormData(form);

      const passkey = formData.get("passkey");

      const loginSuccess = await adminLogin(passkey.toString(), form);

      if (!loginSuccess) {
        showAlert(
          "Admin login failed please try again.",
          "error",
          "admin-alert"
        );
        return;
      }

      showAlert(
        "Admin login success, loading data...",
        "success",
        "admin-alert"
      );

      form.style.display = "none";
      dashboard.style.display = "flex";
      adminPage.style.display = "none";
      window.location.href = "/admin";
    });

    loadingOverlays.style.display = "flex";
    form.style.display = "none";
    dashboard.style.display = "none";
    adminPage.style.display = "none";

    const token = getCookie("adminToken");
    if (token) {
      await getAndPopulateUsers();
      await getAndPopulatePCs();
      form.style.display = "none";
      dashboard.style.display = "flex";
      adminPage.style.display = "none";
      loadingOverlays.style.display = "none";
      return;
    }
    form.style.display = "flex";
    adminPage.style.display = "flex";
    loadingOverlays.style.display = "none";
    showAlert("Please login with your admin passkey", "info", "admin-alert");
  });
</script>
