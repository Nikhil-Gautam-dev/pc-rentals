---
import BaseLayout from "../layouts/BaseLayout.astro";
export const prerender = false;
---

<BaseLayout title="My Orders | PC Rentals">
  <div class="orders-wrapper">
    <h1 class="orders-title">My Orders</h1>

    <div class="orders-container">
      <div class="orders-header">
        <h2>Your Rental History</h2>
        <p>View and manage all your PC rental orders here.</p>
      </div>

      <div class="loading-container">
        <div class="loading-overlay" id="loadingOverlay">
          <div class="spinner"></div>
          <p>Loading your orders...</p>
        </div>

        <div class="table-container">
          <table class="orders-table">
            <thead>
              <tr>
                <th>Order ID</th>
                <th>PC Name</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Duration</th>
                <th>Amount</th>
                <th>Current Status</th>
                <th>Payment Status</th>
                <th>View</th>
              </tr>
            </thead>
            <tbody id="ordersTableBody">
              <!-- Table rows will be populated by JavaScript -->
              <tr class="empty-state">
                <td colspan="9">
                  <div class="empty-state-content">
                    <div class="empty-icon">ðŸ“‹</div>
                    <h3>No orders found</h3>
                    <p>
                      Your order history will appear here once you rent a PC.
                    </p>
                    <a href="/" class="browse-button">Browse PCs to Rent</a>
                  </div>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Order Details Modal -->
  <div id="orderModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Order Details</h2>
      </div>
      <div class="modal-body" id="modalBody">
        <!-- Modal content will be populated by JavaScript -->
      </div>
      <div class="modal-footer">
        <button class="modal-button secondary" id="payNowModalButton"
          >paynow</button
        >
        <button class="modal-button secondary" id="closeModalButton"
          >Close</button
        >
      </div>
    </div>
  </div>

  <!-- Alert Component -->
  <div class="alert-container" id="alertContainer">
    <div class="alert">
      <div class="alert-icon">
        <svg viewBox="0 0 24 24" width="24" height="24">
          <path
            fill="currentColor"
            d="M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm-1-11v6h2v-6h-2zm0-4v2h2V7h-2z"
          ></path>
        </svg>
      </div>
      <div class="alert-content" id="alertContent">Alert message here</div>
      <button class="alert-close" id="alertClose">
        <svg viewBox="0 0 24 24" width="18" height="18">
          <path
            fill="currentColor"
            d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
          ></path>
        </svg>
      </button>
    </div>
  </div>
</BaseLayout>

<style is:global>
  .orders-wrapper {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .orders-title {
    text-align: center;
    margin-bottom: 2rem;
    color: #2c2c54;
    font-size: 2rem;
  }

  .orders-container {
    background-color: #fff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
  }

  .orders-header {
    padding: 1.5rem;
    background-color: #2c2c54;
    color: white;
  }

  .orders-header h2 {
    margin: 0 0 0.5rem 0;
    font-size: 1.5rem;
  }

  .orders-header p {
    margin: 0;
    opacity: 0.8;
  }

  .loading-container {
    position: relative;
    min-height: 300px;
    padding: 20px;
    display: flex;
  }

  .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.9);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 10;
    opacity: 1;
    transition:
      opacity 0.3s ease,
      visibility 0.3s ease;
  }

  .loading-overlay.hidden {
    opacity: 0;
    visibility: hidden;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(44, 44, 84, 0.2);
    border-radius: 50%;
    border-top-color: #2c2c54;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .orders-content {
    padding: 1.5rem;
  }

  .filters {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .search-field {
    flex: 1;
    min-width: 200px;
  }

  .search-input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 1rem;
  }

  .filter-options {
    display: flex;
    gap: 1rem;
  }

  .filter-select {
    padding: 0.75rem 1rem;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 1rem;
    background-color: #f8f9fa;
    min-width: 150px;
  }

  .table-container {
    overflow-x: auto;
    margin-bottom: 1.5rem;
    display: flex;
  }

  .orders-table {
    width: 100%;
    border-collapse: collapse;
    table-layout: fixed;
    color: #1e1e42;
  }

  .orders-table th,
  .orders-table td {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid #eee;
  }

  .orders-table th {
    background-color: #f8f9fa;
    font-weight: 600;
    color: #2c2c54;
  }

  .orders-table tr:hover {
    background-color: #f8f9fa;
  }

  .status-badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 50px;
    font-size: 0.85rem;
    font-weight: 600;
    text-align: center;
  }

  .status-active {
    background-color: #e3f2fd;
    color: #1976d2;
  }

  .status-completed {
    background-color: #e8f5e9;
    color: #388e3c;
  }

  .status-cancelled {
    background-color: #ffebee;
    color: #d32f2f;
  }

  .status-pending {
    background-color: #fff8e1;
    color: #f57c00;
  }

  .action-buttons {
    display: flex;
    gap: 0.5rem;
  }

  .action-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
    transition: background-color 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .action-button:hover {
    background-color: #f1f1f1;
  }

  .action-button svg {
    height: 18px;
    width: 18px;
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
  }

  .pagination-button {
    padding: 0.5rem 1rem;
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .pagination-button:hover:not(:disabled) {
    background-color: #e9ecef;
  }

  .pagination-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Empty state styling */
  .empty-state-content {
    padding: 3rem 1rem;
    text-align: center;
  }

  .empty-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
  }

  .empty-state-content h3 {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
    color: #2c2c54;
  }

  .empty-state-content p {
    color: #666;
    margin-bottom: 1.5rem;
  }

  .browse-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background-color: #2c2c54;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 600;
    transition: background-color 0.3s;
  }

  .browse-button:hover {
    background-color: #1e1e42;
  }

  /* Modal styles */
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 100;
    justify-content: center;
    align-items: center;
  }

  .modal.show {
    display: flex;
  }

  .modal-content {
    background-color: white;
    border-radius: 12px;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    color: #1e1e42;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    background-color: #2c2c54;
    color: white;
  }

  .modal-header h2 {
    margin: 0;
    font-size: 1.5rem;
  }

  .close-button {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    line-height: 1;
  }

  .modal-body {
    padding: 1.5rem;
    overflow-y: auto;
  }

  .modal-footer {
    padding: 1rem 1.5rem;
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    border-top: 1px solid #eee;
  }

  .modal-button {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .modal-button.primary {
    background-color: #2c2c54;
    color: white;
  }

  .modal-button.primary:hover {
    background-color: #1e1e42;
  }

  .modal-button.secondary {
    background-color: #f8f9fa;
    color: #333;
    border: 1px solid #ddd;
  }

  .modal-button.secondary:hover {
    background-color: #e9ecef;
  }

  /* Order details styling */
  .order-detail-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
  }

  .order-detail-section {
    margin-bottom: 1.5rem;
  }

  .order-detail-section h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: #2c2c54;
    font-size: 1.2rem;
    border-bottom: 1px solid #eee;
    padding-bottom: 0.5rem;
  }

  .detail-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.75rem;
  }

  .detail-label {
    font-weight: 600;
    color: #666;
  }

  .pc-image-preview {
    /* width: 100px; */
    height: 100px;
    object-fit: cover;
    border-radius: 8px;
    margin-bottom: 1rem;
  }

  /* Alert styles */
  .alert-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    max-width: 350px;
    transform: translateX(400px);
    transition: transform 0.3s ease-in-out;
  }

  .alert-container.show {
    transform: translateX(0);
  }

  .alert {
    display: flex;
    align-items: center;
    padding: 16px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    margin-bottom: 10px;
  }

  .alert-icon {
    margin-right: 12px;
    color: #2c2c54;
  }

  .alert-content {
    flex: 1;
    font-size: 14px;
    color: #333;
  }

  .alert-close {
    background: none;
    border: none;
    cursor: pointer;
    color: #777;
    padding: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.2s;
    height: 2rem;
    width: 2rem;
  }

  .alert-close:hover {
    background-color: #f1f1f1;
  }

  .alert.success .alert-icon {
    color: #28a745;
  }

  .alert.error .alert-icon {
    color: #dc3545;
  }

  .alert.warning .alert-icon {
    color: #ffc107;
  }

  img {
    height: 100px;
  }

  #payNowModalButton {
    background-color: #d32f2f;
    color: white;
  }

  /* Responsive styles */
  @media (max-width: 768px) {
    .filters {
      flex-direction: column;
    }

    .search-field {
      width: 100%;
    }

    .filter-options {
      width: 100%;
    }

    .order-detail-grid {
      grid-template-columns: 1fr;
    }

    .orders-table {
      min-width: 750px;
    }
  }
</style>

<script>
  import { getCookie } from "../utils/cookiesHandler";
  import axios from "axios";

  document.addEventListener("DOMContentLoaded", () => {
    // DOM Elements
    console.log(import.meta.env.PUBLIC_PORT);
    const loadingOverlay = document.getElementById("loadingOverlay");
    const ordersTableBody = document.getElementById("ordersTableBody");
    const orderModal = document.getElementById("orderModal");
    const closeModal = document.getElementById("closeModal");
    const closeModalButton = document.getElementById("closeModalButton");
    const modalBody = document.getElementById("modalBody");
    const alertContainer = document.getElementById("alertContainer");
    const alertContent = document.getElementById("alertContent");
    const alertClose = document.getElementById("alertClose");
    const alert = document.querySelector(".alert");
    const payNowBtn = document.querySelector(
      "#payNowModalButton"
    ) as HTMLButtonElement;

    const fetchOrders = async () => {
      try {
        const response = await axios.get(
          `http://localhost:8000/api/pc/getPCByUserId?userId=${getCookie("userId")}`,
          {
            headers: {
              Authorization: `Bearer ${getCookie("accessToken")}`,
            },
          }
        );

        const orders = response.data.pcs || [];
        renderOrders(orders);

        if (loadingOverlay) {
          loadingOverlay.classList.add("hidden");
        }
      } catch (error) {
        console.error("Error fetching orders:", error);
        showAlert("Failed to load orders. Please login first.", "error");

        if (loadingOverlay) {
          loadingOverlay.classList.add("hidden");
        }
      }
    };

    // Function to render orders
    const renderOrders = (orders: any) => {
      if (!ordersTableBody) return;

      // Clear table
      ordersTableBody.innerHTML = "";

      // Show empty state if no orders
      if (orders.length === 0) {
        ordersTableBody.innerHTML = `
        <div class="empty-state">
          <div colspan="10">
            <div class="empty-state-content">
              <div class="empty-icon">ðŸ“‹</div>
              <h3>No orders found</h3>
              <p>Your order history will appear here once you rent a PC.</p>
              <a href="/" class="browse-button">Browse PCs to Rent</a>
            </div>
          </div>
        </div>
      `;
        return;
      }

      // Render orders
      orders.forEach((order: any) => {
        const startDate = new Date(order.rentalPeriod.startDate);
        const endDate = new Date(order.rentalPeriod.endDate);

        let duration = endDate.getDate() - startDate.getDate();
        let durationText = duration === 1 ? "1 day" : `${duration} days`;

        if (order.hours > 0) {
          durationText = order.hours === 1 ? "1 hour" : `${order.hours} hours`;
        }

        let statusClass = "status-pending";
        switch (order.paymentInfo.paymentStatus) {
          case "Pending":
            statusClass = "status-active";
            break;
          case "Completed":
            statusClass = "status-completed";
            break;
          case "Failed":
            statusClass = "status-cancelled";
            break;
        }

        let returnedStatus = order ? "status-completed" : "status-active";
        let returnedStatusText = order ? "rented" : "returned";

        console.log(statusClass);

        const row = document.createElement("tr");
        row.innerHTML = `
        <td><span class="order-id">${order._id.substring(0, 8)}...</span></td>
        <td>${order.pcDetails[0].name || "Unknown PC"}</td>
        <td>${startDate.toDateString()}</td>
        <td>${endDate.toDateString()}</td>
        <td>${durationText}</td>
        <td>$${order.totalPayment || "N/A"}</td>
        <td><span class="status-badge ${returnedStatus}">${returnedStatusText}</span></td>
        <td><span class="status-badge ${statusClass}">${order.paymentInfo.paymentStatus || "Pending"}</span></td>
        <td>
          <div class="action-buttons">
            <button class="action-button view-details" data-id="${order._id}" title="View Details">
              <svg viewBox="0 0 24 24" width="18" height="18">
                <path fill="currentColor" d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
              </svg>
            </button>
           
          </div>
        </td>
      `;

        ordersTableBody.appendChild(row);
      });

      // Add event listeners for action buttons
      document.querySelectorAll(".view-details").forEach((button) => {
        button.addEventListener("click", (e: any) => {
          const orderId = e.currentTarget.getAttribute("data-id");
          console.log("view: ", orderId);
          const order = orders.find((o) => o._id === orderId);
          if (order) {
            showOrderDetails(order);
          }
        });
      });
    };

    // Function to show order details
    const showOrderDetails = (order: any) => {
      if (!modalBody) return;

      payNowBtn.dataset["orderId"] = order._id;

      payNowBtn.style.display =
        order.paymentInfo.paymentStatus != "Completed" ? "flex" : "none";

      const startDate = new Date(order.rentalPeriod.startDate);
      const endDate = new Date(order.rentalPeriod.endDate);

      let duration = endDate.getDate() - startDate.getDate();
      let durationText = duration === 1 ? "1 day" : `${duration} days`;

      if (order.hours > 0) {
        durationText = order.hours === 1 ? "1 hour" : `${order.hours} hours`;
      }

      let statusClass = "status-pending";
      switch (order.paymentInfo.paymentStatus) {
        case "Pending":
          statusClass = "status-active";
          break;
        case "Completed":
          statusClass = "status-completed";
          break;
        case "Failed":
          statusClass = "status-cancelled";
          break;
      }

      let returnedStatus = order ? "status-completed" : "status-active";
      let returnedStatusText = order ? "rented" : "returned";

      modalBody.innerHTML = `
      <div class="order-detail-grid">
        <div class="order-detail-section">
          <h3>PC Information</h3>
          <img src="${order.pcDetails[0].image || "/placeholder-pc.jpg"}" alt="${order.pcDetails[0].name || "PC"}" class="pc-image-preview">
          <div class="detail-row">
            <span class="detail-label">PC Name:</span>
            <span>${order.pcDetails[0].name || "Unknown PC"}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Rate:</span>
            <span>$${order.pcDetails[0].rentPerDay || "N/A"}/day</span>
          </div>
        </div>
        
        <div class="order-detail-section">
          <h3>Rental Details</h3>
          <div class="detail-row">
            <span class="detail-label">Order ID:</span>
            <span>${order._id}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Order Status:</span>
            <span class="status-badge ${returnedStatus || "pending"}">${returnedStatusText || "Pending"}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Payment:</span>
            <span class="status-badge ${statusClass || "pending"}">${order.paymentInfo.paymentStatus || "Pending"}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Start Date:</span>
            <span>${startDate.toDateString()}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">End Date:</span>
            <span>${endDate.toDateString()}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Duration:</span>
            <span>${durationText}</span>
          </div>
        </div>
      </div>
      
      <div class="order-detail-section">
        <h3>Payment Information</h3>
        <div class="detail-row">
          <span class="detail-label">Base Price:</span>
          <span>$${order.orderInfo.basePrice || "N/A"}</span>
        </div>
        <div class="detail-row">
          <span class="detail-label">Insurance:</span>
          <span>$${order.orderInfo.insurancePrice}</span>
        </div>
        <div class="detail-row">
          <span class="detail-label">Delivery:</span>
          <span>$${order.orderInfo.deliveryPrice}</span>
        </div>
        <div class="detail-row">
          <span class="detail-label">Tax:</span>
          <span>${order.orderInfo.taxRate + "%" || "N/A"}</span>
        </div>
        <div class="detail-row" style="font-weight: bold; margin-top: 0.5rem; border-top: 1px solid #eee; padding-top: 0.5rem;">
          <span class="detail-label">Total Amount:</span>
          <span>$${order.orderInfo.totalPrice || "N/A"}</span>
        </div>
      </div>
    `;

      orderModal.classList.add("show");
    };

    // Function to show alert
    const showAlert = (message: string, type = "info") => {
      if (!alertContainer || !alertContent || !alert) return;

      // Remove existing classes
      alert.classList.remove("success", "error", "warning", "info");
      // Add the
      // Add the appropriate class for alert type
      alert.classList.add(type);

      // Set alert message
      alertContent.textContent = message;

      // Show alert
      alertContainer.classList.add("show");

      // Auto hide after 3 seconds
      setTimeout(() => {
        alertContainer.classList.remove("show");
      }, 3000);
    };

    // Event listeners
    if (closeModal) {
      closeModal.addEventListener("click", () => {
        orderModal.classList.remove("show");
      });
    }

    if (payNowBtn) {
      payNowBtn.addEventListener(
        "click",
        () =>
          (document.location.href = `/checkout?orderId=${payNowBtn.dataset["orderId"]}`)
      );
    }

    if (closeModalButton) {
      closeModalButton.addEventListener("click", () => {
        orderModal.classList.remove("show");
      });
    }

    if (alertClose) {
      alertClose.addEventListener("click", () => {
        alertContainer.classList.remove("show");
      });
    }

    // Initialize page - fetch orders
    fetchOrders();

    // Close modal when clicking outside
    window.addEventListener("click", (e) => {
      if (e.target === orderModal) {
        orderModal.classList.remove("show");
      }
    });
  });
</script>
